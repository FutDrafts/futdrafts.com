import { relations } from 'drizzle-orm'
import { pgTable, text, timestamp, boolean, json, pgEnum, serial } from 'drizzle-orm/pg-core'

const postStatuses = ['draft', 'published', 'archived'] as const
export type PostStatus = (typeof postStatuses)[number]
export const postStatusEnum = pgEnum('post_status', postStatuses)

const postCategories = ['transfers', 'match-reports', 'analysis', 'interviews', 'news'] as const
export type PostCategory = (typeof postCategories)[number]
export const postCategoryEnum = pgEnum('post_category', postCategories)

export const post = pgTable('post', {
    id: text('id').primaryKey(),
    title: text('title').notNull(),
    slug: text('slug').notNull().unique(),
    content: text('content').notNull(),
    excerpt: text('excerpt'),
    status: postStatusEnum('status').notNull().default('draft'),
    category: postCategoryEnum('category').notNull(),
    featuredImage: text('featured_image'),
    authorId: text('author_id')
        .notNull()
        .references(() => user.id),
    publishedAt: timestamp('published_at'),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const postRelations = relations(post, ({ one }) => ({
    author: one(user, {
        fields: [post.authorId],
        references: [user.id],
    }),
}))

export const config = pgTable('config', {
    key: text('key').primaryKey(),
    value: json('value').notNull(),
    updatedBy: text('updated_by')
        .notNull()
        .references(() => user.id),
    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),
})

const reportCategories = [
    'harassment',
    'spam',
    'inappropriate_behavior',
    'hate_speech',
    'cheating',
    'impersonation',
    'other',
] as const
export type ReportCategory = (typeof reportCategories)[number]
export const reportCategoryEnum = pgEnum('report_category', reportCategories)

const reportStatuses = ['pending', 'resolved', 'dismissed'] as const
export type ReportStatus = (typeof reportStatuses)[number]
export const reportStatusEnum = pgEnum('report_status', reportStatuses)

export const report = pgTable('report', {
    id: text('id').primaryKey(),
    reportedUserId: text('reported_user_id').notNull(),
    reportedByUserId: text('reported_by_user_id').notNull(),
    reason: text('reason').notNull(),
    category: reportCategoryEnum('category').notNull(),
    details: text('details'),
    status: reportStatusEnum('status').notNull().default('pending'),
    adminNotes: text('admin_notes'),
    resolvedByUserId: text('resolved_by_user_id'),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const reportRelations = relations(report, ({ one, many }) => ({
    reportedUser: one(user, {
        fields: [report.reportedUserId],
        references: [user.id],
    }),
    reportedByUser: one(user, {
        fields: [report.reportedByUserId],
        references: [user.id],
    }),
    resolvedByUser: one(user, {
        fields: [report.resolvedByUserId],
        references: [user.id],
    }),
    comments: many(reportComment),
}))

export const reportComment = pgTable('report_comment', {
    id: text('id').primaryKey(),
    reportId: text('report_id')
        .notNull()
        .references(() => report.id, { onDelete: 'cascade' }),
    adminId: text('admin_id')
        .notNull()
        .references(() => user.id, { onDelete: 'cascade' }),
    content: text('content').notNull(),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const reportCommentRelations = relations(reportComment, ({ one }) => ({
    report: one(report, {
        fields: [reportComment.reportId],
        references: [report.id],
    }),
    admin: one(user, {
        fields: [reportComment.adminId],
        references: [user.id],
    }),
}))

export const waitlistUsers = pgTable('waitlist_users', {
    id: serial('id').primaryKey(),
    email: text('email').notNull().unique(),
    notified: boolean('notified').notNull().default(false),
    signupDate: timestamp('signup_date').notNull().defaultNow(),
})

export const changelog = pgTable('changelog', {
    id: text('id').primaryKey().notNull(),
    title: text('title').notNull(),
    description: text('description').notNull(),
    version: text('version'),
    date: timestamp('date').defaultNow().notNull(),
    important: boolean('important').default(false),
    published: boolean('published').default(false),
    authorId: text('author_id').references(() => user.id, { onDelete: 'set null' }),
    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),
})

// SCHEMA GENERATED BY BETTER-AUTH
// DO NOT EDIT TABLES UNDER THIS COMMENT

export const user = pgTable('user', {
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    email: text('email').notNull().unique(),
    emailVerified: boolean('email_verified').notNull(),
    image: text('image'),
    createdAt: timestamp('created_at').notNull(),
    updatedAt: timestamp('updated_at').notNull(),
    role: text('role'),
    banned: boolean('banned').default(false).notNull(),
    banReason: text('ban_reason'),
    banExpires: timestamp('ban_expires'),
    username: text('username').unique(),
    displayUsername: text('display_username'),
    lastLogin: timestamp('last_login').notNull(),
})

export const session = pgTable('session', {
    id: text('id').primaryKey(),
    expiresAt: timestamp('expires_at').notNull(),
    token: text('token').notNull().unique(),
    createdAt: timestamp('created_at').notNull(),
    updatedAt: timestamp('updated_at').notNull(),
    ipAddress: text('ip_address'),
    userAgent: text('user_agent'),
    userId: text('user_id')
        .notNull()
        .references(() => user.id, { onDelete: 'cascade' }),
    impersonatedBy: text('impersonated_by'),
})

export const account = pgTable('account', {
    id: text('id').primaryKey(),
    accountId: text('account_id').notNull(),
    providerId: text('provider_id').notNull(),
    userId: text('user_id')
        .notNull()
        .references(() => user.id, { onDelete: 'cascade' }),
    accessToken: text('access_token'),
    refreshToken: text('refresh_token'),
    idToken: text('id_token'),
    accessTokenExpiresAt: timestamp('access_token_expires_at'),
    refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),
    scope: text('scope'),
    password: text('password'),
    createdAt: timestamp('created_at').notNull(),
    updatedAt: timestamp('updated_at').notNull(),
})

export const verification = pgTable('verification', {
    id: text('id').primaryKey(),
    identifier: text('identifier').notNull(),
    value: text('value').notNull(),
    expiresAt: timestamp('expires_at').notNull(),
    createdAt: timestamp('created_at'),
    updatedAt: timestamp('updated_at'),
})

export const jwks = pgTable('jwks', {
    id: text('id').primaryKey(),
    publicKey: text('public_key').notNull(),
    privateKey: text('private_key').notNull(),
    createdAt: timestamp('created_at').notNull(),
})
